#include <Arduino.h>
#include "./my_functions.h"
#include "Adafruit_GC9A01A.h"
#include "Wire.h"
#include <Adafruit_INA219.h>
#include <SimpleFOC.h>
#include "haptic.h"
#include <cmath>

/*-----------------------------------------------
  Motor Driver
-----------------------------------------------*/
#define UL 14 //red motor wire
#define UH 13 //red motor wire  - phase C
#define VL 12 //Blue motor wire
#define VH 21 //Blue motor wire -   pahse B
#define WL 47 //yellow motor wire
#define WH 48 //yellow motor wire - phase A
BLDCDriver6PWM driver = BLDCDriver6PWM(WH, WL, VH, VL, UH, UL);


BLDCMotor motor = BLDCMotor(7);//, 7.8, 270);


/*-----------------------------------------------
  Position Sensor
-----------------------------------------------*/
MagneticSensorI2C as5600 = MagneticSensorI2C(AS5600_I2C);
TwoWire positionSensorI2C(1);
#define pos_SDA_PIN 17
#define pos_SCL_PIN 16

/*-----------------------------------------------
  Haptic controller and things
-----------------------------------------------*/

PIDController P_haptic(1.0,0,0,100000,5);
float attract_angle = 0;
float attractor_distance = (17.1428571429 * 3.14159265359f)/180.0; // 21 attractors should be divisible by 7 and work with the poll count hopeuflly

float findAttractor(float current_angle){
  return round(current_angle/attractor_distance)*attractor_distance;
}


/*-----------------------------------------------
  Tasks
-----------------------------------------------*/
TaskHandle_t motorTaskHandle;
void motorTask(void *pvParameters);

void setup() {
  Serial.begin(115200);

  positionSensorI2C.begin(pos_SDA_PIN, pos_SCL_PIN);
  as5600.init(&positionSensorI2C);
  motor.linkSensor(&as5600);
  
  driver.voltage_power_supply = 5;
  driver.init();
  motor.linkDriver(&driver);
  motor.voltage_sensor_align = 5;

  motor.phase_resistance = 7.8; // [Ohm]
  motor.current_limit = 1.2;   // [Amps] - if phase resistance defined
  motor.voltage_limit = 5;   // [V] - if phase resistance not defined
  motor.velocity_limit = 20; // [rad/s] cca 50rpm
  motor.torque_controller = TorqueControlType::voltage;//TorqueControlType::voltage;
  motor.controller = MotionControlType::torque;
  
  motor.init();
  motor.initFOC();
  motor.target = 0;
  _delay(1000);

  xTaskCreatePinnedToCore(motorTask, "MotorTask", 10000, NULL, 1, NULL, 0); // Task assigned to core 0
}
float currentShaftAngle = 0;

void loop() {
}

void motorTask(void *pvParameters) {
  while (1) {
	motor.loopFOC();
    currentShaftAngle = motor.shaft_angle;
    motor.move(P_haptic(attract_angle - currentShaftAngle));
    attract_angle = findAttractor(currentShaftAngle);
  }
}
